@inject IDialogService DialogService
@inject CartService CartService
@using FlexPro.Client.Components
@using FlexPro.Client.Pages.Site.Contato
@implements IDisposable


<Carrinho @bind-IsOpen="_openCart"/>

<header class="header">
	<div class="logo">
		<img src="assets/images/logo-proauto.png" alt="Logo da Empresa">
	</div>
	<button class="menu-toggle" onclick="ToggleMenu()">
		<MudIcon Icon="@Icons.Material.Filled.Menu" Size="Size.Small" Color="Color.Primary"/>
	</button>

	<nav class="menu @(_isOpen ? "active" : "")">
		<ul>
			<li><a href="">Home</a></li>
			@*<li><a Href="Produtos/lista">Produtos</a></li> *@
			<li><a Href="Empresa">Empresa</a></li>
			<li><a @onclick="OpenDialogAsync">Contato</a></li>
		</ul>
	</nav>
	<div>
		<ul class="grp-menu">
			<li class="carrinho-container">
				<MudBadge Content="@ItensCarrinho" Overlap="true" Color="Color.Error" Visible="@(ItensCarrinho > 0)">
					<MudIconButton Icon="@Icons.Material.Outlined.ShoppingCart" Color="Color.Primary" Size="Size.Small"
					               OnClick="OpenCart"/>
				</MudBadge>
				<MudIconButton Icon="@Icons.Material.Filled.Login" Href="Account/login" Color="Color.Primary"
				               Size="Size.Small"/>
			</li>
		</ul>
	</div>
</header>



@code {
	private int ItensCarrinho;
	private bool _isOpen;
	private bool _openCart;

	protected override async Task OnInitializedAsync()
	{
		await CartService.InitializeAsync();
		ItensCarrinho = CartService.GetCartCount();
		CartService.CartCountChanged += UpdateCount;
	}

	private Task OpenDialogAsync()
	{
		var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
		return DialogService.ShowAsync<Contato>("Entre em Contato", options);
	}

	private void ToggleMenu()
	{
		_isOpen = !_isOpen;
	}

	private void UpdateCount(int count)
	{
		ItensCarrinho = count;
	}

	private void OpenCart()
	{
		_openCart = true;
	}

	public void Dispose()
	{
		CartService.CartCountChanged -= UpdateCount;
	}

}