@inherits LayoutComponentBase

@inject AuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudThemeProvider IsDarkMode="@_isDarkMode" Theme="_theme"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<AuthorizeView>
    <Authorized>
        <NotificationProvider/>
        <!-- Layout para usuário logado -->
        <MudLayout>
            <MudAppBar Elevation="1" Dense="true" Color="Color.Primary">
                <MudIconButton Edge="Edge.Start" OnClick="@(e => DrawerToggle())">
                    <MudIcon Icon="@Icons.Material.Filled.Menu" Color="Color.Secondary"/>
                </MudIconButton>
                <MudText Typo="Typo.h6" Class="ml-3">Proauto Kimium</MudText>
                <MudSpacer/>
                <MudToggleIconButton @bind-Toggled="_isDarkMode"
                                     Icon="@Icons.Material.Filled.LightMode"
                                     Color="@Color.Inherit"
                                     ToggledIcon="@Icons.Material.Filled.ModeNight"
                                     ToggledColor="@Color.Primary"/>
                <MudMenu Size="Size.Medium">
                    <ActivatorContent>
                        <MudAvatar Style="@($"background: {Colors.Gray.Lighten4}")" Variant="Variant.Filled">
                            <MudImage Src="assets/images/logo.png"/>
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudPaper Elevation="0" Style="padding: 10px;">
                            <MudAvatar Variant="Variant.Filled" Color="Color.Secondary">@userName.</MudAvatar>
                            <br>
                            <MudText Typo="Typo.overline" Align="Align.Center" Color="Color.Primary">@(string.IsNullOrWhiteSpace(userName) ? "U" : userName[0].ToString().ToUpper())</MudText>
                        </MudPaper>
                        <MudMenuItem Label="Conta"/>
                        <MudMenuItem Label="Configurações"/>
                        <MudPaper Elevation="0" Style="padding: 10px;">
                            <MudButton FullWidth="true" Color="Color.Error" StartIcon="@Icons.Material.Filled.Logout" Variant="Variant.Filled" Href="account/logout">Logout</MudButton>
                        </MudPaper>
                    </ChildContent>
                </MudMenu>
                <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Edge="Edge.End"
                               Href="https://github.com/MurilloHMS" Target="_blank"/>
            </MudAppBar>

            <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Breakpoint="Breakpoint.Lg"
                       MiniWidth="50px" Elevation="1" Variant="DrawerVariant.Mini" OpenMiniOnHover="true">
                <NavMenu/>
            </MudDrawer>

            <MudMainContent Class="mt-16 pa-4">
                @Body
            </MudMainContent>
        </MudLayout>
    </Authorized>

    <NotAuthorized>
        <div class="full-height-layout">
            <Header/>
            <MudMainContent Class="flex-grow-1 mt-10 pa-4">
                @Body
            </MudMainContent>
            <Footer/>
        </div>
    </NotAuthorized>
</AuthorizeView>

<MudScrollToTop >
    <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.KeyboardArrowUp"/>
</MudScrollToTop>

<div id="blazor-error-ui">
    Ocorreu um erro desconhecido.
    <a href="" class="reload">Recarregar página</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _isDarkMode;
    private bool _drawerOpen;
    
    private string userName;

    private readonly MudTheme _theme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = "#232e61",
            Secondary = "#57c1ab"
        }
    };

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.FindFirst(ClaimTypes.Name)?.Value
                       ?? user.FindFirst("unique_name")?.Value
                       ?? "Sem nome";
        }
    }

}
