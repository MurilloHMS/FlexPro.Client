@inject ISnackbar Snackbar

@code {
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync() {
        try {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl("https://api.proautokimium.com/notificationHub")
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On<string>("ReceiveNotification", message => { InvokeAsync(() => Snackbar.Add(message, Severity.Info)); });

            await _hubConnection.StartAsync();
        }
        catch (HttpRequestException e ) {
            Snackbar.Add($"Não foi possível conectar ao websocket {Environment.NewLine} statusCode: {e.StatusCode}", Severity.Error);
        }
    }

    public async ValueTask DisposeAsync() {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }
}