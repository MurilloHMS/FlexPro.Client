@using FlexPro.Client.Application.DTOs
@inject IAuthService Service
@inject ISnackbar Snackbar

@attribute [Authorize]

<MudDialog>
	<DialogContent>
		<MudGrid>
			<MudItem xs="12">
				<MudPaper Class="pa-4">
					<MudForm @ref="_form" @bind-IsValid="_isFormValid">
						<MudTextField Label="Senha" @bind-Value="UpdatePassword.Password" Required/>
						<MudTextField Label="Nova Senha" @bind-Value="UpdatePassword.NewPassword" Required/>
						<MudTextField Label="Confirmar Senha" @bind-Value="_confirmPassword" Required Immediate="true" For="@(() => _confirmPassword)" Validation="ValidateConfirmPassword"/>
					</MudForm>
				</MudPaper>
			</MudItem>
		</MudGrid>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="CloseDialog" Color="Color.Secondary">Cancelar</MudButton>
		<MudButton OnClick="Save" Color="Color.Primary" Disabled="!_isFormValid">Salvar</MudButton>
	</DialogActions>
</MudDialog>

@code {
	private MudForm _form = null!;
	private bool _isFormValid;
	private string _confirmPassword = string.Empty;
	public required UpdatePasswordDto UpdatePassword { get; set; }
	
	[CascadingParameter]
	public required IMudDialogInstance MudDialog { get; set; }
	
	[Parameter]
	public required string Username { get; set; }
	
	private void CloseDialog() => MudDialog.Cancel();

	private async Task Save() {
		await _form.Validate();

		if (!_form.IsValid)
			return;
		
		UpdatePassword.Username = Username;
		await Service.UpdatePassword(UpdatePassword);
		Snackbar.Add("Usuário Cadastrado com Sucesso!", Severity.Success);
		MudDialog?.Close();
	}
	
	private string? ValidateConfirmPassword(string value) {
		if (string.IsNullOrWhiteSpace(value))
			return "Confirme a senha";
		
		if (value != UpdatePassword.NewPassword)
			return "As senhas não correspondem";

		return null;
	}
}