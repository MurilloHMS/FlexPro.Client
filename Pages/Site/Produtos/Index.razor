@page "/Produtos/lista"
@using FlexPro.Client.Models.Response
@inject IJSRuntime JS
@inject ProdutoService ProdutoService

<div class="produto-page d-flex">
    <!-- Menu lateral -->
    <aside class="menu-lateral" style="width: 250px;">
        <MudPaper Elevation="0" Class="pa-4">
            <MudList T="string" Dense="true">
                @foreach (var departamento in ProdutosPorDepartamento.Keys)
                {
                    <MudListItem OnClick="() => ScrollToDepartamento(departamento)">
                        <AvatarContent>
                            <MudAvatar Size="Size.Small" Class="mr-2" Color="Color.Transparent" Variant="Variant.Outlined">
                                <MudIcon Icon="@Icons.Material.Filled.ArrowLeft"/>
                            </MudAvatar>
                        </AvatarContent>
                        <ChildContent>@departamento</ChildContent>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </aside>

    <!-- Grid de produtos -->
    <section class="grid-produtos flex-grow-1">
        @foreach (var grupo in ProdutosPorDepartamento)
        {
            var idDepartamento = GetDepartamentoId(grupo.Key);
            <MudText Typo="Typo.h5" Class="mt-6 mb-2 px-4" Id="@idDepartamento">@grupo.Key</MudText>
            <MudGrid GutterSize="3" Class="px-4">
                @foreach (var produto in grupo.Value)
                {
                    <MudItem xs="12" sm="6" md="4" lg="2" Class="mud-item-hover">
                        <MudLink Href="@($"/produtos/{produto.Id}")" Style="text-decoration: none;">
                            <MudCard Class="mud-hover">
                                <MudCardMedia
                                    Image="@("assets/images/placeholder.png")"
                                    Height="200"
                                    Style="background-size: contain; background-position: center; background-repeat: no-repeat;"/>
                                <MudCardContent>
                                    <MudText Typo="Typo.subtitle1">@produto.Nome</MudText>
                                    <MudText Typo="Typo.body2">@produto.Descricao</MudText>
                                    <MudText Typo="Typo.body2" Class="mt-2">Cor: @produto.Cor</MudText>
                                    <MudText Typo="Typo.body2">Diluição: @produto.Diluicao</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudLink>
                    </MudItem>
                }
            </MudGrid>
        }
    </section>
</div>

@code {

    Dictionary<string, List<ProdutoLojaResponse>> ProdutosPorDepartamento = new();

    protected override async Task OnInitializedAsync()
    {
        var produtos = await ProdutoService.GetProdutoLoja();

        // Agrupar produtos por departamento
        var produtosPorDep = new Dictionary<string, List<ProdutoLojaResponse>>();
        foreach (var produto in produtos)
        {
            foreach (var dep in produto.Departamentos)
            {
                if (!produtosPorDep.ContainsKey(dep.Nome))
                {
                    produtosPorDep[dep.Nome] = new List<ProdutoLojaResponse>();
                }

                produtosPorDep[dep.Nome].Add(produto);
            }
        }

        // Ordenar departamentos alfabeticamente e produtos por nome
        ProdutosPorDepartamento = produtosPorDep
            .OrderBy(kvp => kvp.Key)
            .ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value.OrderBy(p => p.Nome).ToList()
            );
    }

    private async Task ScrollToDepartamento(string departamento)
    {
        var id = GetDepartamentoId(departamento);
        await JS.InvokeVoidAsync("scrollToSection", id);
    }

    private string GetDepartamentoId(string departamento)
    {
        return "departamento-" + departamento.Replace(" ", "-").ToLower();
    }

}