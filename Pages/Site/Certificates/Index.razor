@page "/sales/documents/certificates"

@inject NavigationManager NavigationManager
@inject DeviceDetector DeviceDetector
@inject IJSRuntime Js

<div class="container">
    <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary" class="mt-10">
        <b>Parabéns! Você está à um passo de conquistar seu certificado.</b>
    </MudText>
    <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Primary">Este certificado significa que você participou do treinamento <b>Gestão, Higiêne e Limpeza </b></MudText>
    <br><br>
    <iframe width="560" height="315" src="https://www.youtube.com/embed/l4ESEUUkqUQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
    <br><br>
    <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Primary">Preencha os campos a seguir para ter acesso ao seu certificado.</MudText>
    <MudPaper Class="pa-4">
        <MudForm @ref="form" @bind-IsValid="@isFormValid">
            <MudTextField @bind-Value="@nome" Label="Nome completo" HelperText="Digite seu nome" Required/>
            <MudTextField @bind-Value="@email" Label="Email" HelperText="Digite seu email" Required/>
            <MudTextField @bind-Value="@contato" Label="WhatsApp" HelperText="Digite seu número de WhatsApp" Required/>
        </MudForm>
    </MudPaper>
    <MudPaper Class="pa-4 mt-4 d-flex justify-content-center">
        <MudButton StartIcon="@Icons.Material.Filled.Download" Color="Color.Primary" Variant="Variant.Filled" Disabled="!isFormValid" OnClick="@(() => GerenateCerticicate())">Gerar Certificado</MudButton>
    </MudPaper>
</div>

@code {

    private string? NomeInstrutor = string.Empty;
    private bool isFormValid;
    private MudForm form;
    private bool isLoading;
    private string? message;
    private Severity severity;
    private bool _initialized;
    
    private string nome;
    private string email;
    private string contato;

    protected override Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        GetQuery();
        return Task.CompletedTask;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender && !_initialized)
        // {
        //     _initialized = true;
        //     var isMobile = await DeviceDetector.IsMobileAsync();
        //     if(!isMobile)
        //         NavigationManager.NavigateTo(NavigationManager.BaseUri, true);
        // }
    }

    private void GetQuery()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        NomeInstrutor = query["nome"];
        StateHasChanged();
    }
    
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        GetQuery();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task GerenateCerticicate()
    {
        string nomeFormatado = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(nome.ToLower());
        if (!string.IsNullOrWhiteSpace(nome))
        {
            await Js.InvokeVoidAsync("generateCertificate", nomeFormatado);
        }
    }

}