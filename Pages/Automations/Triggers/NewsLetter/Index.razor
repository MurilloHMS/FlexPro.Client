@page "/automations/triggers/newsletter"

@attribute [Authorize(Roles = "Developer,Admin")]

<PageTitle>Informativo Clientes</PageTitle>

<MudPaper>
    <MudStepper NonLinear CenterLabels OnPreviewInteraction="OnPreviewInteraction">
        <MudStep Title="Passo 1" SecondaryText="Envio da planilha com os dados das notas fiscais"
                 HasError="_hasPasso1Error">
            <MudText>Faça o upload da planilha com os dados da nota fiscal.</MudText>
            <MudFileUpload T="IBrowserFile" FilesChanged="@(async files => await UploadDadosNfe(files))"
                           Accept=".xlsx" MaximumFileCount="1">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">Upload File
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            @if (_isPasso1Concluido) {
                <MudText Color="Color.Success" Typo="Typo.caption">✔ Arquivo enviado com sucesso.</MudText>
            }
        </MudStep>

        <MudStep Title="Passo 2" SecondaryText="Envio da planilha com os dados das Ordens de serviço"
                 HasError="_hasPasso2Error">
            <MudText>Faça o upload da planilha com os dados das ordens de serviço.</MudText>
            <MudFileUpload T="IBrowserFile" FilesChanged="@(async files => await UploadDadosOs(files))"
                           Accept=".xlsx" MaximumFileCount="1">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">Upload File
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            @if (_isPasso2Concluido) {
                <MudText Color="Color.Success" Typo="Typo.caption">✔ Arquivo enviado com sucesso.</MudText>
            }
        </MudStep>

        <MudStep Title="Passo 3" SecondaryText="Envio da planilha com os dados das peças trocadas"
                 HasError="_hasPasso3Error">
            <MudText>Faça o upload da planilha com os dados das peças trocadas.</MudText>
            <MudFileUpload T="IBrowserFile" FilesChanged="@(async files => await UploadDadosPecasTrocadas(files))"
                           Accept=".xlsx" MaximumFileCount="1">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">Upload File
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            @if (_isPasso3Concluido) {
                <MudText Color="Color.Success" Typo="Typo.caption">✔ Arquivo enviado com sucesso.</MudText>
            }
        </MudStep>

        <MudStep Title="Passo 4" SecondaryText="Validação">
            <MudText>Selecione os clientes aprovados para envio de e-mail.</MudText>
            <MudDataGrid T="Informativo"
                         MultiSelection="true"
                         Items="_informativos"
                         SortMode="SortMode.Multiple"
                         Filterable="true"
                         Hideable="true"
                         SelectedItemsChanged="@SelectedItemsChanged"
                         Loading="_isLoading">
                <ToolBarContent>
                    <MudSelect T="string" @bind-Value="selectedMonth" Placeholder="Selecione o Mês de Referência">
                        @foreach (var month in months) {
                            <MudSelectItem Value="@month">@month</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSpacer/>
                    <MudTextField @bind-Value="_searchString" Placeholder="Buscar Cliente" Adornment="Adornment.Start"
                                  Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"/>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="Informativo"/>
                    <PropertyColumn Property="x => x.CodigoCliente" Title="Cód Cliente"/>
                    <PropertyColumn Property="x => x.NomeDoCliente" Title="Cliente"/>
                    <PropertyColumn Property="x => x.ProdutoEmDestaque" Title="Produto em Destaque"/>
                    <PropertyColumn Property="x => x.QuantidadeDeProdutos" Title="Qtd Produtos"/>
                    <PropertyColumn Property="x => x.QuantidadeDeLitros" Title="Qtd Litros"/>
                    <PropertyColumn Property="x => x.QuantidadeNotasEmitidas" Title="Notas Emitidas"/>
                    <PropertyColumn Property="x => x.QuantidadeDeVisitas" Title="Visitas"/>
                    <PropertyColumn Property="x => x.ValorDePeçasTrocadas" Title="Valor Peças"/>
                    <PropertyColumn Property="x => x.MediaDiasAtendimento" Title="Média Dias"/>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Informativo"/>
                </PagerContent>
            </MudDataGrid>

            <MudButton OnClick="AtualizarDadosDaTabela" Variant="Variant.Filled" Color="Color.Primary"
                       Disabled="_isLoading"
                       StartIcon="@Icons.Material.Filled.Refresh">Atualizar Tabela
            </MudButton>

            <MudButton OnClick="EnviarInformativos" Variant="Variant.Filled" Color="Color.Primary"
                       Disabled="_isLoading || !_clientesSelecionados.Any()"
                       StartIcon="@Icons.Material.Filled.Send">
                Confirmar @_clientesSelecionados.Count() clientes selecionados
            </MudButton>
        </MudStep>

        <MudStep Title="Envio dos Emails" SecondaryText="Envio concluído">
            <MudText>E-mails enviados com sucesso (caso anterior tenha passado).</MudText>
        </MudStep>
    </MudStepper>
</MudPaper>

@code {
    [Inject] IDialogService DialogService { get; set; }
    [Inject] HttpClient Http { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    private bool _isPasso1Concluido, _isPasso2Concluido, _isPasso3Concluido, _isValid;
    private bool _hasPasso1Error, _hasPasso2Error, _hasPasso3Error;
    private bool _isLoading;

    private IBrowserFile planilhaDadosNfe, planilhaDadosOs, planilhaDadosPecasTrocadas;

    private List<Informativo> _informativos = new();
    private List<InformativoNFe> _informativoNFe = new();
    private List<InformativoOs> _informativoOs = new();
    private List<InformativoPecasTrocadas> _informativoPecasTrocadas = new();
    private IEnumerable<Informativo> _clientesSelecionados = new List<Informativo>();
    private string _searchString;

    private readonly string[] months = new[] {
        "Janeiro",
        "Fevereiro",
        "Março",
        "Abril",
        "Maio",
        "Junho",
        "Julho",
        "Agosto",
        "Setembro",
        "Outubro",
        "Novembro",
        "Dezembro"
    };

    private string selectedMonth = string.Empty;

    private async Task<List<T>> UploadArquivo<T>(IBrowserFile file, string url, string fileKey, Action onSuccess, Action onError) {
        var content = new MultipartFormDataContent();
        if (file != null) {
            var streamContent = new StreamContent(file.OpenReadStream());
            streamContent.Headers.ContentType = new MediaTypeHeaderValue("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            content.Add(streamContent, fileKey, file.Name);
        }

        var response = await Http.PostAsync(url, content);
        if (response.IsSuccessStatusCode) {
            var data = await response.Content.ReadFromJsonAsync<List<T>>();
            if (data != null && data.Any()) {
                Snackbar.Add("Dados coletados com sucesso!", Severity.Success);
                onSuccess();
                return data;
            }
        }

        onError();
        Snackbar.Add("Erro ao processar o arquivo.", Severity.Error);
        return new List<T>();
    }

    private async Task UploadDadosNfe(IBrowserFile file1) {
        planilhaDadosNfe = file1;
        _informativoNFe = await UploadArquivo<InformativoNFe>(
            file1, "api/Informativo/upload/nfe", "file",
            () => _isPasso1Concluido = true,
            () => _hasPasso1Error = true
        );
    }

    private async Task UploadDadosOs(IBrowserFile file2) {
        planilhaDadosOs = file2;
        _informativoOs = await UploadArquivo<InformativoOs>(
            file2, "api/Informativo/upload/os", "file",
            () => _isPasso2Concluido = true,
            () => _hasPasso2Error = true
        );
    }

    private async Task UploadDadosPecasTrocadas(IBrowserFile file3) {
        planilhaDadosPecasTrocadas = file3;
        _informativoPecasTrocadas = await UploadArquivo<InformativoPecasTrocadas>(
            file3, "api/Informativo/upload/pecasTrocadas", "file",
            () => _isPasso3Concluido = true,
            () => _hasPasso3Error = true
        );
    }

    private async Task AtualizarDadosDaTabela() {
        try {
            _isLoading = true;

            var request = new DadosRequest {
                Month = selectedMonth,
                InformativoNFes = _informativoNFe,
                InformativoOs = _informativoOs,
                InformativoPecasTrocadas = _informativoPecasTrocadas
            };

            var response = await Http.PostAsJsonAsync("api/Informativo/calcular", request);
            if (response.IsSuccessStatusCode) {
                _informativos = await response.Content.ReadFromJsonAsync<List<Informativo>>();
                _isValid = _informativos.Any();
            } else {
                Snackbar.Add("Erro ao atualizar dados", Severity.Error);
            }
        }
        catch (Exception ex) {
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
        }
        finally {
            _isLoading = false;
        }
    }

    private void SelectedItemsChanged(HashSet<Informativo> items) {
        _clientesSelecionados = items;
    }

    private async Task EnviarInformativos() {
        if (!_clientesSelecionados.Any()) {
            Snackbar.Add("Nenhum cliente selecionado!", Severity.Warning);
            return;
        }

        try {
            _isLoading = true;
            // Http.Timeout = TimeSpan.FromMinutes(10);
            var response = await Http.PostAsJsonAsync("api/Email/send/informativos", _clientesSelecionados);

            if (response.IsSuccessStatusCode)
                Snackbar.Add("E-mails enviados com sucesso!", Severity.Success);
            else
                Snackbar.Add("Erro ao enviar os informativos", Severity.Error);
        }
        catch (Exception ex) {
            Snackbar.Add($"Erro inesperado: {ex.Message}", Severity.Error);
        }
        finally {
            _isLoading = false;
        }
    }

    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg) {
        if (arg.Action == StepAction.Complete)
            await ValidarEtapas(arg);
        else if (arg.Action == StepAction.Activate)
            await VerificarPreRequisitos(arg);
    }

    private async Task ValidarEtapas(StepperInteractionEventArgs arg) {
        switch (arg.StepIndex) {
            case 0 when !_isPasso1Concluido:
                await DialogService.ShowMessageBox("Erro", "Você precisa enviar o arquivo da nota fiscal!");
                arg.Cancel = true;
                break;
            case 1 when !_isPasso2Concluido:
                await DialogService.ShowMessageBox("Erro", "Você precisa enviar as Ordens de Serviço!");
                arg.Cancel = true;
                break;
            case 2 when !_isPasso3Concluido:
                await DialogService.ShowMessageBox("Erro", "Você precisa enviar as Peças Trocadas!");
                arg.Cancel = true;
                break;
            case 3 when !_isValid:
                await DialogService.ShowMessageBox("Erro", "Você precisa validar os dados antes de prosseguir.");
                arg.Cancel = true;
                break;
        }
    }

    private async Task VerificarPreRequisitos(StepperInteractionEventArgs arg) {
        switch (arg.StepIndex) {
            case 1 when !_isPasso1Concluido:
            case 2 when !_isPasso2Concluido:
            case 3 when !_isPasso3Concluido:
            case 4 when !_isValid:
                await DialogService.ShowMessageBox("Erro", "Complete o passo anterior antes de continuar.");
                arg.Cancel = true;
                break;
        }
    }
}
