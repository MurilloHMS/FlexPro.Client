@page "/management/vehicles/fuelings"

@inject IDialogService DialogService
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime

@attribute [Authorize]

<PageTitle>Abastecimentos</PageTitle>

<MudText Typo="Typo.h5">Abastecimentos</MudText>

<MudFileUpload T="IBrowserFile" 
               Accept=".xlsx, .xls" 
               MaximumFileCount="100" 
               FilesChanged="UploadFile"
               Class="mt-5">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Selecionar Arquivo
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

@if (_files != null) {
    <MudList T="string">
        @foreach (var file in _files) {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}
<MudButton OnClick="@(() => ImportarDados())"
           Variant="Variant.Filled"
           Disabled="@_isValid"
           Class="m-5">
    Importar Dados
</MudButton>

<MudDataGrid Items="@AbastecimentosFiltrados" T="Abastecimento"
             Hover="true"
             Bordered="true"
             Striped="true"
             Dense="true"
             SortMode="SortMode.Multiple"
             Filterable="true"
             Virtualize="true"
             Loading="_dataLoaded">
    <ToolBarContent>
        <MudStack Row="true" Spacing="3">
            <MudFab OnClick="@(() => ExportarDados())" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Download"
                    Size="Size.Small" Label="Exportar"/>
            <MudMenu FullWidth="true" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter"
                     TransformOrigin="Origin.TopCenter" Variant="Variant.Filled" Dense="true" Size="Size.Small">
                <ActivatorContent>
                    <MudFab EndIcon="@Icons.Material.Filled.Mouse" Color="Color.Primary" Size="Size.Small"
                            Label="Relatórios"/>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="@(() => DownloadRelatorios("Geral"))">Geral</MudMenuItem>
                    <MudMenuItem OnClick="@(() => DownloadRelatorios("Setor"))">Setor</MudMenuItem>
                    <MudMenuItem OnClick="@(() => DownloadRelatorios("Individual"))">Individual</MudMenuItem>
                </ChildContent>
            </MudMenu>
            <MudMenu FullWidth="true" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter"
                     TransformOrigin="Origin.TopCenter" Variant="Variant.Filled" Dense="true" Size="Size.Small">
                <ActivatorContent>
                    <MudFab Color="Color.Primary" EndIcon="@Icons.Material.Filled.Mail" Size="Size.Small"
                            Label="Enviar"/>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="@(() => EnviarRelatorios("Geral"))">Geral</MudMenuItem>
                    <MudMenuItem OnClick="@(() => EnviarRelatorios("Setor"))">Setor</MudMenuItem>
                    <MudMenuItem OnClick="@(() => EnviarRelatorios("Individual"))">Individual</MudMenuItem>
                    <MudMenuItem OnClick="@(() => EnviarRelatorios("Todos"))">Todos</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </MudStack>
        <MudSpacer/>
        <MudTextField T="string" @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.NomeDoMotorista" Title="Motorista" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.Placa" Title="Placa" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.Departamento" Title="Departamento" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.Uf" Title="UF" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.DataDoAbastecimento" Title="Data do Abastecimento" Sortable="true"
                        Filterable="true" Format="dd/MM/yyyy"/>
        <PropertyColumn Property="x => x.Litros" Title="Litros" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.ValorTotalTransacao" Title="Total Gasto" Sortable="true" Filterable="true"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Abastecimento"/>
    </PagerContent>
</MudDataGrid>

@code {
    private bool _isValid = true;
    private bool _dataLoaded;

    private IEnumerable<Abastecimento>? _abastecimentos;
    private readonly IList<IBrowserFile>? _files = new List<IBrowserFile>();

    private string _searchString = "";

    private IEnumerable<Abastecimento>? AbastecimentosFiltrados {
        get {
            if (_abastecimentos != null)
                return string.IsNullOrWhiteSpace(_searchString)
                    ? _abastecimentos
                    : _abastecimentos.Where(a =>
                        a.Departamento.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                        a.NomeDoMotorista.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                        a.Combustivel.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
                    );
            return null;
        }
    }

    private void UploadFile(IBrowserFile? file) {
        if (file != null) {
            _files?.Add(file);
            _isValid = false;
        } 
    }

    protected override async Task OnInitializedAsync() {
        try {
            _dataLoaded = true;
            var listaDeAbastecimentos = await Http.GetFromJsonAsync<List<Abastecimento>>("api/abastecimento");
            _abastecimentos = listaDeAbastecimentos;
        }
        catch (Exception e) {
            Snackbar.Add($"Ocorreu um erro ao coletar os dados de abastecimento {e.Message}");
        }
        finally {
            _dataLoaded = false;
        }
    }


    private async Task ImportarDados() {
        _dataLoaded = true;
        if (_files is not null && _files.Any()) {
            Snackbar.Add("Iniciando processamento dos dados...", Severity.Info);
            var content = new MultipartFormDataContent();
            var file = _files.First();
            var fileContent = new StreamContent(file.OpenReadStream());
            fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
            content.Add(fileContent, "file", file.Name);

            var response = await Http.PostAsync("api/abastecimento/upload", content);
            if (response.IsSuccessStatusCode) {
                _abastecimentos = await response.Content.ReadFromJsonAsync<List<Abastecimento>>();
                Snackbar.Add("Dados processados com sucesso!", Severity.Success);
            } else {
                Snackbar.Add($"Ocorreu um erro, Status code: {response.StatusCode} error: {response.RequestMessage}");
            }
        } else {
            Snackbar.Add("Erro: Nenuma informação encontrada", Severity.Error);
        }

        _dataLoaded = false;
        _isValid = true;
    }

    private async Task ExportarDados() {
        _dataLoaded = true;
        if (AbastecimentosFiltrados is null) {
            Snackbar.Add("Dados Abastecimentos não encontrados", Severity.Error);
            return;
        }

        var outputFolder = Path.Combine(Path.GetTempPath(), "Abastecimento");
        if (!Directory.Exists(outputFolder)) {
            Directory.CreateDirectory(outputFolder);
        }

        var fileName = Path.Combine(outputFolder, $"Abastecimentos-{DateTime.Now:dd-mm-yyyy}.xlsx");
        using (var workbook = new XLWorkbook()) {
            var worksheet = workbook.Worksheets.Add("Abastecimentos");

            worksheet.Cell(1, 1).Value = "ID";
            worksheet.Cell(1, 2).Value = "Data do Abastecimento";
            worksheet.Cell(1, 3).Value = "UF";
            worksheet.Cell(1, 4).Value = "Nome do Motorista";
            worksheet.Cell(1, 5).Value = "Departamento";
            worksheet.Cell(1, 6).Value = "Hodômetro Atual";
            worksheet.Cell(1, 7).Value = "Hodômetro Anterior";
            worksheet.Cell(1, 8).Value = "Diferença do Hodômetro";
            worksheet.Cell(1, 9).Value = "Média KM/L";
            worksheet.Cell(1, 10).Value = "Tipo do Combustível";
            worksheet.Cell(1, 11).Value = "Litros Abastecidos";
            worksheet.Cell(1, 12).Value = "Preço do Litro";
            worksheet.Cell(1, 13).Value = "Valor Total";

            var novaLinha = 2;

            foreach (var linha in AbastecimentosFiltrados) {
                worksheet.Cell(novaLinha, 1).Value = linha.Id;
                worksheet.Cell(novaLinha, 2).Value = linha.DataDoAbastecimento;
                worksheet.Cell(novaLinha, 3).Value = linha.Uf;
                worksheet.Cell(novaLinha, 4).Value = linha.NomeDoMotorista;
                worksheet.Cell(novaLinha, 5).Value = linha.Departamento;
                worksheet.Cell(novaLinha, 6).Value = linha.HodometroAtual;
                worksheet.Cell(novaLinha, 7).Value = linha.HodometroAnterior;
                worksheet.Cell(novaLinha, 8).Value = linha.DiferencaHodometro;
                worksheet.Cell(novaLinha, 9).Value = linha.MediaKm;
                worksheet.Cell(novaLinha, 10).Value = linha.Combustivel;
                worksheet.Cell(novaLinha, 11).Value = linha.Litros;
                worksheet.Cell(novaLinha, 12).Value = linha.Preco;
                worksheet.Cell(novaLinha, 13).Value = linha.ValorTotalTransacao;

                novaLinha++;
            }

            workbook.SaveAs(fileName);
        }

        var fileBytes = File.ReadAllBytes(fileName);
        Snackbar.Add("Dados Exportados Com Sucesso!", Severity.Success);
        _dataLoaded = false;
        await DownloadFile(fileBytes, Path.GetFileName(fileName));
    }

    private async Task DownloadFile(byte[] fileBytes, string fileName) {
        var fileStream = new BlazorDownloadFileStream(fileBytes);
        var base64File = Convert.ToBase64String(fileStream.FileBytes);
        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, base64File);
    }

    public class BlazorDownloadFileStream {
        public byte[] FileBytes { get; }

        public BlazorDownloadFileStream(byte[] fileBytes) {
            FileBytes = fileBytes;
        }
    }

    private async Task DownloadRelatorios(string tipo) {
        var parametros = new DialogParameters<RelatoriosAbastecimentos> {
            { x => x.tipo, tipo },
            { x => x.isDownload, true }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<RelatoriosAbastecimentos>($"Download do Relatório {tipo}", parametros, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled) {
            Snackbar.Add($"Iniciando Download Relatório {tipo}", Severity.Success);
        }
    }

    private async Task EnviarRelatorios(string tipo) {
        var parametros = new DialogParameters<RelatoriosAbastecimentos> {
            { x => x.tipo, tipo },
            { x => x.isDownload, false }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<RelatoriosAbastecimentos>($"Envio do Relatório {tipo}", parametros, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled) {
            Snackbar.Add($"Iniciando Envio dos relatórios {tipo}", Severity.Success);
        }
    }
}
