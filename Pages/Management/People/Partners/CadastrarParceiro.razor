@using FlexPro.Client.Domain.Models.Request
@using FlexPro.Client.Domain.Models.Response
@inject ParceiroService Service
@inject ISnackbar Snackbar

@attribute [Authorize]

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudForm @ref="form" @bind-IsValid="isFormValid">
                    <MudTextField Label="Codigo Sistema" @bind-Value="_parceiro.CodigoSistema" Required="true"/>
                    <MudTextField Label="Nome" @bind-Value="_parceiro.Nome" Required="true"/>
                    <MudTextField Label="RazÃ£o Social" @bind-Value="_parceiro.RazaoSocial"/>
                    <MudTextField Label="Email" @bind-Value="_parceiro.Email" Required="true"/>
                    <MudCheckBox T="bool" Label="Ativo" @bind-Value="_parceiro.Ativo"/>
                    <MudCheckBox T="bool" Label="Recebe Email" @bind-Value="_parceiro.RecebeEmail"/>
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog" Color="Color.Secondary">Cancelar</MudButton>
        <MudButton OnClick="Salvar" Color="Color.Primary" Disabled="!isFormValid">Salvar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private ParceiroResponseDto _parceiro = new();
    private MudForm form;
    private bool isFormValid;

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }

    [Parameter] public ParceiroResponseDto parceiro { get; set; }

    [Parameter] public string Tipo { get; set; }

    protected override void OnInitialized() {
        if (parceiro is not null) {
            _parceiro = parceiro;
        }
    }

    private void CloseDialog() {
        MudDialog.Cancel();
    }

    private async Task Salvar() {
        try {
            if (_parceiro?.Id != null) {
                var response = await Service.UpdateAsync($"api/parceiro/{_parceiro.Id}", _parceiro);
                if (response.IsSuccess) {
                    Snackbar.Add("Cadastro atualizado com sucesso", Severity.Success);
                } else {
                    Snackbar.Add($"Ocorreu um erro: {response.Message}", Severity.Error);
                }
            } else {
                var newParceiro = new ParceiroRequestDTO {
                    CodigoSistema = _parceiro.CodigoSistema,
                    Ativo = _parceiro.Ativo,
                    Email = _parceiro.Email,
                    Nome = _parceiro.Nome,
                    RazaoSocial = _parceiro.RazaoSocial,
                    RecebeEmail = _parceiro.RecebeEmail
                };
                var response = await Service.CreateAsync("api/parceiro", newParceiro);
                if (response.IsSuccess) {
                    Snackbar.Add("Cadastro realizado com sucesso", Severity.Success);
                } else {
                    Snackbar.Add($"Ocorreu um erro: {response.Message}", Severity.Error);
                }
            }
        }
        catch (Exception e) {
            Snackbar.Add($"Ocorreu um erro desconhecido: {e.Message}", Severity.Error);
        }

        MudDialog?.Close(DialogResult.Ok(_parceiro));
    }

    private string GetDisplayName(StatusContatoE tipo) {
        var field = tipo.GetType().GetField(tipo.ToString());
        var attr = field?.GetCustomAttributes(typeof(DisplayAttribute), false).Cast<DisplayAttribute>().FirstOrDefault();
        return attr?.Name ?? tipo.ToString();
    }
}