@using FlexPro.Client.Domain.Models.Response
@inject IContactService Service
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;

<MudDataGrid Items="@FilteredContacts"
             T="ContactResponse"
             Hover="true"
             Bordered="true"
             Striped="true"
             Dense="true"
             SortMode="SortMode.Multiple"
             Filterable="true"
             Loading="_isLoading"
             Virtualize
             ex>
    <ToolBarContent>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudIconButton OnClick="@(() => UpdateData())" Variant="Variant.Filled" Size="Size.Small"
                           Color="Color.Primary" Icon="@Icons.Material.Filled.Update"/>
        </MudButtonGroup>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="ContactResponse"></HierarchyColumn>
        <PropertyColumn Property="x => x.DataSolicitadoContato" Title="Data Solicitação" Sortable="true"
                        Filterable="true" Format="dd/MM/yyyy"/>
        <PropertyColumn Property="x => x.Nome" Title="Nome" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.NomeEmpresa" Title="Razão Social" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.TipoContato" Title="Tipo Contato" Sortable="true" Filterable="true"/>
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Descrição</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>@context.Item.Mensagem</MudText>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="ContactResponse"/>
    </PagerContent>
</MudDataGrid>

@code {
    private string _searchString = string.Empty;
    private bool _isLoading;
    private IEnumerable<ContactResponse> _contact = new List<ContactResponse>();

    IEnumerable<ContactResponse> FilteredContacts => string.IsNullOrWhiteSpace(_searchString)
        ? _contact
        : _contact.Where(x =>
            x.Nome.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
        );

    protected override void OnInitialized() 
    {
        
    }

    private async Task UpdateData() {
        _isLoading = true;
        _contact = await Service.GetAllAsync() ?? new List<ContactResponse>();
        _isLoading = false;
    }
}