@using FlexPro.Client.Domain.Models.Response
@using FlexPro.Client.Infrastructure.Services
@inject ProdutoService ProdutoService
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;

<MudDataGrid Items="@produtosFiltrados"
             T="ProdutoLojaResponse"
             Hover="true"
             Bordered="true"
             Striped="true"
             Dense="true"
             SortMode="SortMode.Multiple"
             Filterable="true"
             Loading="_isLoading"
             Virtualize>
    <ToolBarContent>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudButton @onclick="@(() => OpenDialogAsync())" Variant="Variant.Filled" Size="Size.Small"
                       Color="Color.Primary">Cadastrar
            </MudButton>
            <span> </span>
            <MudIconButton OnClick="@(() => UpdateData())" Variant="Variant.Filled" Size="Size.Small"
                           Color="Color.Primary" Icon="@Icons.Material.Filled.Update"/>
        </MudButtonGroup>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.CodigoSistema" Title="Cód. Sistema" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.Nome" Title="Nome" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.Descricao" Title="Descrição" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.Cor" Title="Cor" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.Diluicao" Title="Diluição" Sortable="true" Filterable="true"></PropertyColumn>
        <TemplateColumn Hidden="false" CellClass="d-flex justify-center">
            <CellTemplate>
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                               OnClick="@(() => OpenEditDialogAsync(context.Item))"/>
                <MudSpacer/>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ProdutoLojaResponse"/>
    </PagerContent>
</MudDataGrid>

@code {
    private string _searchString = string.Empty;
    private bool _isLoading;
    private IEnumerable<ProdutoLojaResponse> produtos = new List<ProdutoLojaResponse>();

    IEnumerable<ProdutoLojaResponse> produtosFiltrados => string.IsNullOrWhiteSpace(_searchString)
        ? produtos
        : produtos.Where(x =>
            x.Nome.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.Descricao.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.Cor.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.CodigoSistema.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.Diluicao.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
        );

    protected override async Task OnInitializedAsync()
    {
        
    }
    
    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CadastrarProduto>("Cadastro de Produtos", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await UpdateData();
        }
    }

    private async Task OpenEditDialogAsync(ProdutoLojaResponse contextItem)
    {
        var parameters = new DialogParameters<CadastrarProduto>
        {
            {x => x.produtoLoja, contextItem}
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true};
        var dialog = await DialogService.ShowAsync<CadastrarProduto>("Atualizar Produto", parameters, options);
        var result = await dialog.Result;
    }

    private async Task UpdateData()
    {
        _isLoading = true;
        produtos = await ProdutoService.GetProdutoLoja();
        _isLoading = false;
    }

}