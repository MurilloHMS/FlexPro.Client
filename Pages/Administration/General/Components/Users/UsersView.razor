@inject IAuthService Service
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;

@attribute [Authorize(Roles = "Developer,Admin")]

<MudDataGrid Items="@FilteredUsers"
			T="UserResponse"
			Hover="true"
			Bordered="true"
			Striped="true"
			Dense="true"
			SortMode="SortMode.Multiple"
			Filterable="true"
			Loading="_isLoading"
			Virtualize>
	<ToolBarContent>
		<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
			<MudIconButton OnClick="@(_ => UpdateData())" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.Update"/>
			<MudIconButton OnClick="@(_ => OpenDialogAsync())" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.Add"/>
		</MudButtonGroup>
		<MudSpacer/>
		<MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start"
					AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Immediate Class="mt-0"/>
	</ToolBarContent>
	<Columns>
		<PropertyColumn Property="x => x.Username" Title="Usuário" Sortable="true" Filterable="true"/>
		<PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" Filterable="true"/>
		<TemplateColumn Hidden="false" CellClass="d-flex justify-center">
			<CellTemplate>
				<MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
								OnClick="@(() => OpenEditDialogAsync(context.Item))"/>
			</CellTemplate>
		</TemplateColumn>
	|</Columns>
	<PagerContent>
		<MudDataGridPager T="UserResponse"/>
	</PagerContent>
</MudDataGrid>

@code {
	private string _searchString = string.Empty;
	private bool _isLoading;
	private IEnumerable<UserResponse> _users = new List<UserResponse>();

	IEnumerable<UserResponse> FilteredUsers =>
		string.IsNullOrWhiteSpace(_searchString)
		? _users
		: _users.Where(x =>
			x.Username.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
			x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
		);

	private async Task UpdateData() 
	{
		var result = await Service.GetAllUsersAsync();
		if (result.IsSuccess) 
		{
			_isLoading = true;
			_users = result.Data!;
		}
		else 
		{
			Snackbar.Add(result.Message, Severity.Error);
		}
		_isLoading = false;
	}

	private async Task OpenDialogAsync() {
		var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
		var dialog = await DialogService.ShowAsync<CreateUserDialog>("Registrar Usuário");
		var result = await dialog.Result;

		if (result != null && !result.Canceled) {
			await UpdateData();
		}
	}
	
	private async Task OpenEditDialogAsync(UserResponse user) {
		var parametros = new DialogParameters<UpdateUserDialog> {
			{ x => x.UserToEdit, user }
		};

		var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
		var dialog = await DialogService.ShowAsync<UpdateUserDialog>("Editar Usuário", parametros, options);
		var result = await dialog.Result;

		if (result != null && !result.Canceled) {
			Snackbar.Add($"{result.Data}", Severity.Success);
			await UpdateData();
		}
	}
}