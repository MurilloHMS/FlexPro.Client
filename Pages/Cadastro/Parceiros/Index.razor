@page "/parceiros"
@using System.Net
@using System.Net.Http.Headers
@using FlexPro.Client.Models.Response

@inject IDialogService DialogService;
@inject ParceiroService service;
@inject ISnackbar Snackbar;

@attribute [Authorize]

<PageTitle>Parceiros</PageTitle>

<MudText Typo="Typo.h2">Parceiros</MudText>
<br><br><br>
<MudDataGrid Items="@parceirosFiltrados" T="ParceiroResponseDTO" Hover="true" Bordered="true" Striped="true"
             Dense="true" SortMode="SortMode.Multiple" Filterable="true" Loading="_isLoading" Virtualize>
    <ToolBarContent>
        <MudButtonGroup OverrideStyles="false">
            <MudButton @onclick="@(() => OpenDialogAsync())" Variant="Variant.Filled" Size="Size.Small"
                       Color="Color.Primary">Novo
            </MudButton>
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".xlsx">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               Size="Size.Small">
                        Selecionar arquivo
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            <MudButton OnClick="@(() => ImportarDados())" Variant="Variant.Filled" Disabled="@(fileSelected == default)" Size="Size.Small">Importar Parceiros</MudButton>
        </MudButtonGroup>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Buscar parceiro" Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" 
                      IconSize="Size.Medium" 
                      Class="mt-0"/>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.CodigoSistema" Title="Código Sistema" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.Nome" Title="Nome" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.Email" Title="E-Mail" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.RazaoSocial" Title="Razão Social" Sortable="true" Filterable="true"/>
        <TemplateColumn Hidden="false" CellClass="d-flex justify-center">
            <CellTemplate>
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                               OnClick="@(() => OpenEditDialogAsync(context.Item))"/>
                <MudSpacer/>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete"
                               OnClick="@(() => OpendDeleteDialogAsync(context.Item))"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ParceiroResponseDTO"/>
    </PagerContent>
</MudDataGrid>


@code {
    private IEnumerable<ParceiroResponseDTO> _parceiros = default;
    private string _searchString = "";
    private bool _isLoading;
    private bool _isValid = true;
    private IBrowserFile fileSelected = default;

    private IEnumerable<ParceiroResponseDTO> parceirosFiltrados => 
        string.IsNullOrWhiteSpace(_searchString)
        ? _parceiros
        : _parceiros.Where(x => 
            x.RazaoSocial.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
        );

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _isLoading = true;
            _parceiros = await service.GetAllAsync();
        }catch (HttpRequestException ex)
        {
            Snackbar.Add($"Ocorreu um erro ao coletar os dados {Environment.NewLine} Erro: {ex.Message} {Environment.NewLine} StackTrace: {ex.StackTrace}", Severity.Error);
            _parceiros = default;
        }finally
        {
            _isLoading = false;
        }
    }

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CadastrarParceiro>("Cadastro de Parceiros", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task OpendDeleteDialogAsync(ParceiroResponseDTO parceiro)
    {
        var parametros = new DialogParameters<DialogParceiro>
        {
            { x => x.ContentText, "Tem certeza que você quer deletar este registro? Este processo não pode ser revertido!" },
            { x => x.ButtonText, "Deletar" },
            { x => x.Color, Color.Error },
            { x => x.Parceiro, parceiro }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DialogParceiro>("Deletar", parametros, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task OpenEditDialogAsync(ParceiroResponseDTO parceiro)
    {
        var parametros = new DialogParameters<CadastrarParceiro>
        {
            { x => x.parceiro, parceiro }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CadastrarParceiro>("Atualizar Parceiro", parametros, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private void UploadFiles(IBrowserFile file)
    {
        fileSelected = file;
    }

    private async Task ImportarDados()
    {

        try
        {
            _isLoading = true;
            if (fileSelected.Size > 0)
            {
                Snackbar.Add("Iniciando cadastro dos parceiros...", Severity.Normal);
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(fileSelected.OpenReadStream());
                fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");


                content.Add(fileContent, "file", fileSelected.Name);
                var response = await service.UploadParceiros(content);
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Snackbar.Add($"Parceiros cadastrados com sucesso: {response.Message}", Severity.Success);
                    await LoadData();
                }
                else
                {
                    Snackbar.Add($"Ocorreu um erro ao processar o arquivo:{Environment.NewLine} StatusCode: {response.StatusCode} {Environment.NewLine} Message: {response.Message}");
                }
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Ocorreu um erro desconhecido: {e.Message} {Environment.NewLine} stacktrace: {e.StackTrace}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            fileSelected = default;
        }
       
    }
}