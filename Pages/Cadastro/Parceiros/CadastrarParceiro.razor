@using FlexPro.Client.Domain.Enums
@using FlexPro.Client.Models.Request
@using FlexPro.Client.Models.Response
@inject HttpClient Http
@inject ISnackbar Snackbar

@attribute [Authorize]

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudForm @ref="form" @bind-IsValid="isFormValid" >
                    <MudTextField Label="Codigo Sistema" @bind-Value="_parceiro.CodigoSistema" Required="true"/>
                    <MudTextField Label="Nome" @bind-Value="_parceiro.Nome" Required="true"/>
                    <MudTextField Label="RazÃ£o Social" @bind-Value="_parceiro.RazaoSocial"/>
                    <MudTextField Label="Email" @bind-Value="_parceiro.Email" Required="true"/>
                    <MudCheckBox T="bool" Label="Ativo" @bind-Value="_parceiro.Ativo" />
                    <MudCheckBox T="bool" Label="Recebe Email" @bind-Value="_parceiro.RecebeEmail" />
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog" Color="Color.Secondary">Cancelar</MudButton>
        <MudButton OnClick="Salvar" Color="Color.Primary" Disabled="!isFormValid">Salvar</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private ParceiroResponseDTO _parceiro = new ();
    private MudForm form;
    private bool isFormValid;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ParceiroResponseDTO parceiro { get; set; }

    [Parameter]
    public string Tipo { get; set; }

    protected override void OnInitialized()
    {
        if (parceiro is not null)
        {
            _parceiro = parceiro;
        }
    }

    private void CloseDialog()
    {
        MudDialog.Cancel();
    }

    private async Task Salvar()
    {
        try
        {
            if (parceiro is not null)
            {
                var temp = new ParceiroRequestDTO() { CodigoSistema = _parceiro.CodigoSistema, Email = _parceiro.Email, Nome = _parceiro.Nome, RazaoSocial = _parceiro.RazaoSocial != null ? _parceiro.RazaoSocial : _parceiro.Nome,Ativo = _parceiro.Ativo, RecebeEmail = _parceiro.RecebeEmail};
                var response = await Http.PutAsJsonAsync($"api/parceiro/{_parceiro.Id}", temp);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Parceiro Atualizado com Sucesso!", Severity.Success);
                }else 
                { 
                    Snackbar.Add($"Ocorreu um erro ao atualizar o Parceiro! {response.StatusCode} : {await response.Content.ReadAsStringAsync()}", Severity.Error); 
                }
            }
            else
            {
                var response = await Http.PostAsJsonAsync("api/parceiro", _parceiro);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Parceiro Cadastrado com Sucesso!", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Ocorreu um erro ao Cadastrar o parceiro! {response.StatusCode} : {response.Content.ReadAsStringAsync()}", Severity.Error);
                }
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Ocorreu um erro desconhecido: {e.Message}", Severity.Error);
        }
        
        MudDialog?.Close(DialogResult.Ok(_parceiro));
    }
    
    private string GetDisplayName(StatusContato_e tipo)
    {
        var field = tipo.GetType().GetField(tipo.ToString());
        var attr = field?.GetCustomAttributes(typeof(DisplayAttribute), false).Cast<DisplayAttribute>().FirstOrDefault();
        return attr?.Name ?? tipo.ToString();
    }

    
}