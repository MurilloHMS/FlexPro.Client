@page "/Relatorios/Abastecimento/Geral/{Data}"

@inject NavigationManager Navigation
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudText Typo="Typo.h3" Align="Align.Center">Métricas do relatório</MudText>

<MudTextField T="string" Label="Dados para o relatório" Variant="Variant.Outlined" Text="@resultado" Lines="15"/>

@code {
    private string? resultado { get; set; }
    
    [Parameter] public string Data { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var response = await Http.GetAsync($"api/abastecimento/report?date={Data}");
        if (response.IsSuccessStatusCode)
        {
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            DateTime dataDeEmissao = DateTime.Parse(Data);
            var fileName = $"Relatório Abastecimento - {dataDeEmissao.ToString("MM-yyyy")}.pdf";
            await DownloadFile(fileBytes, fileName);
            Snackbar.Add("Relatório gerado com sucesso!", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Erro ao gerar relatório: {response.RequestMessage}");
        }
    }
    
    private async Task DownloadFile(byte[] fileBytes, string fileName)
    {
        var base64File = Convert.ToBase64String(fileBytes);
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, base64File);
    }
}
