@inject HttpClient Http
@inject ISnackbar Snackbar

@attribute [Authorize]

<MudDialog >
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudForm @ref="form" @bind-IsValid="isFormValid">
                    <MudTextField Label="Nome" @bind-Value="veiculo.Nome" Required="true"/>
                    <MudTextField Label="Placa" @bind-Value="veiculo.Placa" Required="true" />
                    <MudSelect Label="Marca" @bind-Value="veiculo.Marca">
                        @foreach (var marca in marcas)
                        {
                            <MudSelectItem Value="marca">@marca</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField Label="Consumo Urbano (Álcool)" @bind-Value="veiculo.ConsumoUrbanoAlcool" />
                    <MudTextField Label="Consumo Rodoviário (Álcool)" @bind-Value="veiculo.ConsumoRodoviarioAlcool" />
                    <MudTextField Label="Consumo Urbano (Gasolina)" @bind-Value="veiculo.ConsumoUrbanoGasolina" />
                    <MudTextField Label="Consumo Rodoviário (Gasolina)" @bind-Value="veiculo.ConsumoRodoviarioGasolina" />
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog" Color="Color.Secondary">Cancelar</MudButton>
        <MudButton OnClick="SalvarVeiculo" Color="Color.Primary" Disabled="!isFormValid">Salvar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private Veiculo veiculo = new Veiculo();
    private MudForm form;
    private bool isFormValid;
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    [Parameter] 
    public Veiculo _veiculo { get; set; }

    private string[] marcas = 
    {
        "ACURA", "ALFA ROMEO", "AUDI", "BMW", "BUICK", "CADILLAC", "CHEVROLET", 
        "CHERY", "CITROËN", "DODGE", "FERRARI", "FIAT", "FORD", "GMC", "HONDA", 
        "HYUNDAI", "INFINITI", "JAGUAR", "JEEP", "KIA", "LAMBORGHINI", 
        "LAND ROVER", "LEXUS", "LINCOLN", "MITSUBISHI", "MERCEDES-BENZ", 
        "MINI", "MITSUBISHI", "NISSAN", "PEUGEOT", "PORSCHE", "RAM", "RENAULT", 
        "SANTA FÉ", "SEAT", "SUBARU", "SUZUKI", "TESLA", "TOYOTA", "VOLKSWAGEN", 
        "VOLVO", "ZAZ", "TROLLER", "JAC MOTORS", "FOTON", "GREAT WALL", "TATA", 
        "BYD", "DIESEL", "MERCURY", "SPYKER", "SMART", "DAEWOO", "FIAT CHRYSLER", 
        "HONDA", "LIFAN", "CHERY", "CROSSFOX", "RENAULT", "FORD"
    };

    protected override void OnInitialized()
    {
        if (_veiculo is not null)
        {
            veiculo = _veiculo;
        }
    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return marcas;

        return marcas.Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
    }


    private void CloseDialog()
    {
        MudDialog.Cancel();
    }

    private async Task SalvarVeiculo()
    {
        try
        {
            if (_veiculo is not null)
            {
                var response = await Http.PutAsJsonAsync<Veiculo>($"api/veiculo/{veiculo.Id}", veiculo);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Veiculo Atualizado com Sucesso!", Severity.Success);
                }
            }
            else
            {
                var response = await Http.PostAsJsonAsync<Veiculo>("api/veiculo", veiculo);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Veiculo Cadastrado com Sucesso!", Severity.Success);
                }
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Ocorreu um erro ao cadastrar o veiculo: {e.Message}",Severity.Error);
            throw;
        }
        MudDialog?.Close(DialogResult.Ok(veiculo));
    }
}