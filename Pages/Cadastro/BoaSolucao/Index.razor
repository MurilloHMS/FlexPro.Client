@page "/BoaSolucao"
@using Anchor = MudBlazor.Anchor
@using Color = MudBlazor.Color

@inject IDialogService DialogService
@inject HttpClient Http
@inject ISnackbar Snackbar

@attribute [Authorize]

<MudText Typo="Typo.h4" Align="Align.Center">Pedidos Boa Solução</MudText>



<MudGrid>
    <MudItem xs="12">
        <MudPaper>
            <MudSelect @bind-Value="_receita.Id" Label="Selecione uma receita" HelperText="Receita do produto para emissão da nota fiscal" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
                @foreach (var item in _receitas)
                {
                    <MudSelectItem Value="@item.Id">@item.Nome</MudSelectItem>
                }
            </MudSelect>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="8">
        <MudPaper >
            <MudToolBar>
                <MudStack Row="true" Spacing="3">
                    <MudMenu FullWidth="false" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Variant="Variant.Filled" Dense="true">
                        <ActivatorContent>
                            <MudFab StartIcon="@Icons.Material.Filled.Receipt" Color="Color.Primary" Size="Size.Small" Label="Receitas"/>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem OnClick="@(() => OpenReceiptDialogAsync())" Icon="@Icons.Material.Filled.AddCircle">Cadastrar</MudMenuItem>
                            <MudMenuItem OnClick="@(() => OpenEditReceiptDialogAsync(_receita))" Icon="@Icons.Material.Filled.Edit">Editar</MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.RemoveCircle">Remover</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                    <MudMenu FullWidth="false" ActivationEvent="MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopLeft" Variant="Variant.Filled" Dense="true">
                        <ActivatorContent>
                            <MudFab StartIcon="@Icons.Material.Filled.ShoppingCart" Color="Color.Primary" Size="Size.Small" Label="Produtos"/>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem OnClick="@(() => OpenProductDialogAsync())" Icon="@Icons.Material.Filled.AddCircle">Cadastrar</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                    <MudFab StartIcon="@Icons.Material.Filled.Update" Size="Size.Small" OnClick="@(() => Atualizar())"/>
                    <MudFab StartIcon="@Icons.Material.Filled.Done" Size="Size.Small" Color="Color.Tertiary" Label="Validar" OnClick="@(() => OpenDrawer())"/>
                </MudStack>
            </MudToolBar>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4" >
        <MudPaper Class="pa-4">
            <MudStack Row="true">
                <MudTextField @bind-Value="@ValorParaCalcular" Label="Calcular Valor do Produto" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                <MudIconButton Icon="@Icons.Material.Filled.Calculate" Color="Color.Primary" OnClick="@(() => CalcularValor())"/>
                <MudTextField @bind-Value="@ResultadoDoCalculo" Label="Resultado" Variant="Variant.Outlined" Margin="Margin.Dense" ReadOnly="true"/>
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudFlexBreak/>
    <MudItem xs="12" sm="8">
        <MudPaper Class="pa-4">
            <MudDataGrid Items="@_produtos" T="Produto" Hover="true" Dense="true" >
                <Columns>
                    <PropertyColumn Property="x => x.CodigoSistema" Title="Código do sistema" CellStyleFunc="@_cellStyleFunc"/>
                    <PropertyColumn Property="x => x.Descricao" Title="Descrição" CellStyleFunc="@_cellStyleFunc"/>
                    <PropertyColumn Property="x => x.QuantidadeFormula" Title="Quantidade Fórmula" Hidden="!_showFormulas" CellStyleFunc="@_cellStyleFunc" Format="N5"/>
                    <PropertyColumn Property="x => x.QuantidadeProducao" Title="Quantidade Produção" CellStyleFunc="@_cellStyleFunc"/>
                    <PropertyColumn Property="x => x.MateriaPrima" Title="Tipo Estoque" CellStyleFunc="@_cellStyleFunc"/>
                    <TemplateColumn Hidden="false" CellClass="d-flex justify-center">
                        <CellTemplate>
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenEditProductDialogAsync(@context.Item))"/>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
            <div class="d-flex flex-wrap mt-4">
                <MudSwitch @bind-Value="_showFormulas" Color="Color.Primary">Mostrar Fórmulas</MudSwitch>

            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-4 mud-height-full">
            <MudTextField @bind-Value="@QuantidadeLitrosProduzidos" Label="Quantidade Litros produzidos" Variant="Variant.Text"/>
            <MudTextField @bind-Value="@QuantidadeEmbalagens" Label="Quantidade Embalagens" Variant="Variant.Filled" ReadOnly/>
            <MudTextField @bind-Value="@QuantidadeCaixas" Label="Quantidade de Caixas" Variant="Variant.Filled" ReadOnly/>
            <MudTextField @bind-Value="@ValorMaoDeObra" Label="Valor Da Mão de Obra" Variant="Variant.Filled" ReadOnly/>
            <MudTextField @bind-Value="@ValorCobradoMaoDeObra" Label="Valor Cobrado Mão de Obra" Variant="Variant.Filled" ReadOnly/>
            <MudTextField @bind-Value="@PesoLiquido" Label="Peso Liquido" Variant="Variant.Filled" ReadOnly/>
            <MudTextField @bind-Value="@PesoBruto" Label="Peso Bruto" Variant="Variant.Filled" ReadOnly/>
        </MudPaper>
    </MudItem>
</MudGrid>

<MudDrawer @bind-Open="@_open" Anchor="Anchor.Top" Elevation="1" Variant="@DrawerVariant.Temporary" OverlayAutoClose="false">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6" Align="Align.Center">Validação Boa Solução</MudText>
    </MudDrawerHeader>
    <MudDrawerContainer>
        <MudGrid>
            <MudItem xs="12" sm="8">
                <MudPaper>
                    <MudDataGrid Items="@_boaSolucao" T="BoaSolucao" Hover="true" Dense="true" >
                        <Columns>
                            <PropertyColumn Property="x => x.CodigoProduto" Title="Codigo Produto"/>
                            <PropertyColumn Property="x => x.Descricao" Title="Descrição (Produto)"/>
                            <PropertyColumn Property="x => x.Quantidade" Title="Quantidade"/>
                            <PropertyColumn Property="x => x.Valor" Title="Valor Unitário"/>
                            <PropertyColumn Property="x => x.ValorTotal" Title="Valor Total"/>
                            <PropertyColumn Property="x => x.isValid" Title="É valido?"/>
                        </Columns>
                    </MudDataGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField T="string" @bind-Value="@textToDescription" FullWidth="true" Label="Descrição da nota" AdornmentIcon="@Icons.Material.Filled.SelectAll" Lines="10" OnAdornmentClick="@(() => multilineReference.SelectAsync())"/>
            </MudItem>
            <MudFlexBreak/>
            <MudDivider/>
            <MudItem xs="12" sm="8"></MudItem>
            <MudItem xs="12" sm="4">
                <MudStack Row="true" Spacing="3">
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                    MaximumFileCount="1"
                    @ref="@_fileUpload"
                    OnFilesChanged="OnInputFileChanged">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" >Upload Arquivo</MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    <MudText Typo="Typo.h6">@_fileNames.Count() Arquivo@(_fileNames.Count() == 1 ? "" : "s"):</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Disabled="@(!_fileNames.Any())" OnClick="@(() => Upload())">Validar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Info" Disabled="@(!_fileNames.Any())" OnClick="@(() => ClearAsync())">Limpar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => Close())">Fechar</MudButton>
                </MudStack>
            </MudItem>
            <MudFlexBreak/>
            <MudItem/>
        </MudGrid>
    </MudDrawerContainer>
</MudDrawer>

@code {
    private Receita _receita = new Receita();
    private IEnumerable<Produto> _produtos = new List<Produto>();
    private IEnumerable<Receita> _receitas = new List<Receita>();
    private IEnumerable<BoaSolucao> _boaSolucao = new List<BoaSolucao>();
    private string textToDescription { get; set; }
    private bool _showFormulas = false;
    private bool _open = false;

    private double QuantidadeLitrosProduzidos { get; set; }
    private double QuantidadeEmbalagens { get; set; }
    private double QuantidadeCaixas { get; set; }
    private decimal ValorMaoDeObra { get; set; }
    private decimal ValorCobradoMaoDeObra { get; set; }
    private double PesoLiquido { get; set; }
    private double PesoBruto { get; set; }
    private decimal ValorParaCalcular { get; set; }
    private decimal ResultadoDoCalculo { get; set; }

    private MudTextField<string> multilineReference;
    private readonly List<IBrowserFile> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        textToDescription = string.Empty;
        _boaSolucao = new List<BoaSolucao>();
    }

    private async Task Close()
    {
        await ClearAsync();
        _open = false;
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Clear();
            _fileNames.Add(file);
        }
    }

    private async Task Upload()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Carregando arquivo para analise.");

        decimal produtosBranco = 0m;
        decimal produtosAmarelos = 0m;
        decimal produtosCinza = 0m;

        if (_fileNames.Any())
        {
            var file = _fileNames.First();
            _boaSolucao = await ColetarDadosBoaSolucao(file);

            if (_produtos.Any())
            {
                foreach (var item in _boaSolucao)
                {
                    var produtoExiste = _produtos.Any(p => p.CodigoSistema == item.CodigoProduto);

                    if (produtoExiste)
                    {
                        var produto = _produtos.FirstOrDefault(p => p.CodigoSistema == item.CodigoProduto);

                        var isValid = produto.QuantidadeProducao == item.Quantidade;

                        item.isValid = isValid;

                        if (produto.MateriaPrima == "Proauto" && produto.Tipo == "Obra Prima")
                        {
                            produtosBranco += item.ValorTotal;
                        }
                        else if (produto.MateriaPrima == "Boa Solução" && produto.Tipo != "Produto")
                        {
                            produtosAmarelos += item.ValorTotal;
                        }
                        else if (produto.MateriaPrima == "Mão de Obra" && produto.Tipo == "Mão de Obra")
                        {
                            produtosCinza += item.ValorTotal;
                        }
                    }
                }

                decimal mercadoriasEmpregas = produtosBranco + produtosAmarelos;
                decimal totalCobrado = produtosBranco + produtosCinza;

                StringBuilder sb = new StringBuilder();
                sb.AppendLine($"Valor da mercadoria recebida para industrializacao: {produtosAmarelos:C}");
                sb.AppendLine();
                sb.AppendLine($"Valor total das mercadorias empregadas: {mercadoriasEmpregas:C}");
                sb.AppendLine();
                sb.AppendLine($"Valor Total Cobrado: R$ {totalCobrado:C}");

                textToDescription = sb.ToString();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _receitas = await Http.GetFromJsonAsync<List<Receita>>("api/receita");
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Ocorreu um erro ao coletar os dados {Environment.NewLine} Erro: {ex.Message} {Environment.NewLine} StackTrace: {ex.StackTrace}", Severity.Error);
            _receitas = default;
        }
    }

    private Func<Produto, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (x.MateriaPrima == "Proauto")
            style += "background-color:#FFFFFF";

        else if (x.MateriaPrima == "Boa Solução" && x.Tipo != "Produto")
            style += "background-color:#ffff00";

        else if (x.MateriaPrima == "Mão de Obra")
            style += "background-color:#e8e8e8";

        else if (x.Tipo == "Produto")
            style += "background-color:#a9d08e";

        return style;
    };

    private void OpenDrawer()
    {
        _open = true;

    }

    private async Task OpenReceiptDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CadastrarReceitas>("Cadastrar Receita", options);
        var result = await dialog.Result;

        if (!result.Canceled)
            await LoadData();
    }
    private async Task OpenEditReceiptDialogAsync(Receita receita)
    {
        var buscaReceita = await Http.GetFromJsonAsync<Receita>($"api/receita/{receita.Id}");
        var parametros = new DialogParameters<CadastrarReceitas>
        {
            { x => x.Receita, buscaReceita }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true};
        var dialog = await DialogService.ShowAsync<CadastrarReceitas>("Editar Receita", parametros, options);
    }

    private async Task OpenProductDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CadastrarProdutos>("Cadastrar Produtos", options);
    }

    private async Task OpenEditProductDialogAsync(Produto produto)
    {
        var parametros = new DialogParameters<CadastrarProdutos>
        {
            { x => x.Produto, produto }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true};
        var dialog = await DialogService.ShowAsync<CadastrarProdutos>("Editar Produto", parametros, options);
    }

    private async Task Atualizar()
    {
        try
        {
            _produtos = await Http.GetFromJsonAsync<List<Produto>>($"api/produto/receitas/{_receita.Id}");
            var receitaAtiva = await Http.GetFromJsonAsync<Receita>($"api/receita/{_receita.Id}");
            await CalcularDados(receitaAtiva);
        }
        catch (Exception)
        {
            Snackbar.Add("Ocorreu um erro ao coletar os dados da receita.", Severity.Error);
        }
    }

    private async Task CalcularDados(Receita receita)
    {
        
        QuantidadeEmbalagens = QuantidadeLitrosProduzidos / receita.Embalagem;
        QuantidadeCaixas = receita.Caixas > 0 ? QuantidadeEmbalagens / receita.Caixas : 0;
        ValorMaoDeObra = receita.ValorMaoDeObra;
        ValorCobradoMaoDeObra = ValorMaoDeObra * (decimal)QuantidadeEmbalagens;
        PesoLiquido = QuantidadeLitrosProduzidos * 1.03;
        PesoBruto = QuantidadeLitrosProduzidos * 1.05;
        
        foreach (var produto in _produtos)
        {
            if (produto.Tipo == "Caixa" )
            {
                produto.QuantidadeProducao = (decimal)QuantidadeCaixas;
            }
            else if (produto.Tipo == "Embalagem")
            {
                produto.QuantidadeProducao = (decimal)QuantidadeEmbalagens;
            }
            else if (produto.Tipo == "Produto")
            {
                if (receita.Caixas >0 && receita.Caixas != null)
                {
                    produto.QuantidadeProducao = (decimal)QuantidadeCaixas;
                }
                else
                {
                    produto.QuantidadeProducao = (decimal)QuantidadeEmbalagens;
                }
            }
            else if (produto.Tipo == "Mão de Obra")
            {
                produto.QuantidadeProducao = 1m;
            }
            else 
            {
                produto.QuantidadeProducao = produto.QuantidadeFormula * (decimal)QuantidadeLitrosProduzidos;
            }
            
        }
    }

    private async Task CalcularValor()
    {
        decimal calculo;
        if (QuantidadeCaixas >0 && QuantidadeCaixas != null)
        {
            calculo = ValorParaCalcular / (decimal)QuantidadeCaixas;
        }
        else
        {
            calculo = ValorParaCalcular / (decimal)QuantidadeEmbalagens;
        }
        ResultadoDoCalculo = calculo != 0 && calculo != null ? calculo : 0m ;
    }

    public async Task<IEnumerable<BoaSolucao>> ColetarDadosBoaSolucao(IBrowserFile arquivo)
    {
        List<BoaSolucao> boaSolucao = new();

        using (var stream = new MemoryStream())
        {
            await arquivo.OpenReadStream().CopyToAsync(stream);
            stream.Position = 0;

            using (XLWorkbook workbook = new(stream))
            {
                var planilha = workbook.Worksheets.First();
                var fileData = planilha?.RowsUsed().Skip(3).Select(row => new BoaSolucao
                {
                    CodigoProduto = row.Cell(1).TryGetValue<string>(out var codigoDoProduto) ? codigoDoProduto : default,
                    Descricao = row.Cell(2).TryGetValue<string>(out var descricao) ? descricao : default,
                    Quantidade = row.Cell(3).TryGetValue<decimal>(out var quantidade) ? quantidade : default,
                    Valor = row.Cell(4).TryGetValue<decimal>(out var valorUnitario) ? valorUnitario : default,
                    ValorTotal = row.Cell(5).TryGetValue<decimal>(out var valorTotal) ? valorTotal : default
                }).ToList();
                
                boaSolucao.AddRange(fileData ?? new List<BoaSolucao>());
            }
        }

        return boaSolucao;
    }

}