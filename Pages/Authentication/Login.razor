@page "/Account/login"
@using FlexPro.Client.Domain.Models
@using FlexPro.Client.Infrastructure.Providers

@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Log In</PageTitle>

<div class="container d-flex align-items-center" style="height: 70vh;">
    <MudGrid Justify="Justify.Center">
        <MudItem sm="5">
            <MudPaper Elevation="3" Class="pa-4">
                <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">Login</MudText>
                <EditForm Model="loginModel" method="post" OnValidSubmit="HandleLogin" FormName="login">
                    <DataAnnotationsValidator/>
                    <MudText GutterBottom="true" Typo="Typo.body1">Use uma conta Proauto para conectar</MudText>
                    <MudGrid>
                        <MudItem md="12">
                            <MudStaticTextField For="@(() => loginModel.Username)" @bind-Value="loginModel.Username"
                                                Label="Email" Placeholder="name@example.com"
                                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "true" }, { "aria-required", "true" } })"/>
                        </MudItem>
                        <MudItem md="12">
                            <MudStaticTextField For="@(() => loginModel.Password)" @bind-Value="loginModel.Password"
                                                Label="Senha" InputType="InputType.Password" Placeholder="Senha"
                                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "current-password" }, { "aria-required", "true" } })"/>
                        </MudItem>
                        <MudItem md="12">
                            @if (!string.IsNullOrEmpty(message)) {
                                <MudAlert Severity="@severity">@message</MudAlert>
                            }
                        </MudItem>
                        <MudItem md="12">
                            @if (isLoading) {
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                            } else {
                                <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                                 FormAction="FormAction.Submit">Login
                                </MudStaticButton>
                            }
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {
    private string? message;
    private Severity severity;
    private readonly LoginModel loginModel = new();
    private bool isLoading;

    protected override void OnInitialized() {
        var uri = new Uri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        if (query["sessionExpired"] == "true") {
            message = "Sua sessão expirou. Faça login novamente";
            severity = Severity.Warning;
        }
    }

    private async Task HandleLogin() {
        try {
            isLoading = true;
            var (statusCode, response) = await AuthService.Login(loginModel);

            if (statusCode == HttpStatusCode.OK) {
                (AuthenticationStateProvider as ApiAuthenticationStateProvider)?.MarkUserAsAuthenticated(response);
                isLoading = false;
                NavigationManager.NavigateTo("");
            } else if (statusCode == HttpStatusCode.NotFound) {
                message = response;
                severity = Severity.Error;
                isLoading = false;
            } else {
                await JSRuntime.InvokeVoidAsync("alert", "Login falhou! Verifique suas credenciais.");
            }
        }
        catch (HttpRequestException ex) {
            message = "Servidor Offline ou em manutenção";
            severity = Severity.Error;
            isLoading = false;
        }
        catch (Exception ex) {
            message = ex.Message;
            severity = Severity.Error;
            isLoading = false;
        }
        finally {
            isLoading = false;
        }
    }
}
